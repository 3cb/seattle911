// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package seattle

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FireCall struct {
	_tab flatbuffers.Table
}

func GetRootAsFireCall(buf []byte, offset flatbuffers.UOffsetT) *FireCall {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FireCall{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FireCall) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FireCall) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FireCall) Address() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FireCall) Datetime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FireCall) IncidentNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FireCall) Latitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FireCall) Longitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FireCall) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FireCallStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func FireCallAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(address), 0)
}
func FireCallAddDatetime(builder *flatbuffers.Builder, datetime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(datetime), 0)
}
func FireCallAddIncidentNumber(builder *flatbuffers.Builder, incidentNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(incidentNumber), 0)
}
func FireCallAddLatitude(builder *flatbuffers.Builder, latitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(latitude), 0)
}
func FireCallAddLongitude(builder *flatbuffers.Builder, longitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(longitude), 0)
}
func FireCallAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func FireCallEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
