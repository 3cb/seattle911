// automatically generated by the FlatBuffers compiler, do not modify

package seattle

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PoliceCall struct {
	_tab flatbuffers.Table
}

func GetRootAsPoliceCall(buf []byte, offset flatbuffers.UOffsetT) *PoliceCall {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PoliceCall{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PoliceCall) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PoliceCall) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PoliceCall) AtSceneTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) CadCdwId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) CadEventNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) CensusTract() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) DistrictSector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) EventClearanceCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) EventClearanceDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) EventClearanceDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) EventClearanceGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) EventClearanceSubgroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) GeneralOffenseNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) HundredBlockLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) InitialTypeDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) InitialTypeGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) InitialTypeSubgroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) Latitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) Longitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PoliceCall) ZoneBeat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PoliceCallStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func PoliceCallAddAtSceneTime(builder *flatbuffers.Builder, atSceneTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(atSceneTime), 0)
}
func PoliceCallAddCadCdwId(builder *flatbuffers.Builder, cadCdwId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cadCdwId), 0)
}
func PoliceCallAddCadEventNumber(builder *flatbuffers.Builder, cadEventNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cadEventNumber), 0)
}
func PoliceCallAddCensusTract(builder *flatbuffers.Builder, censusTract flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(censusTract), 0)
}
func PoliceCallAddDistrictSector(builder *flatbuffers.Builder, districtSector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(districtSector), 0)
}
func PoliceCallAddEventClearanceCode(builder *flatbuffers.Builder, eventClearanceCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(eventClearanceCode), 0)
}
func PoliceCallAddEventClearanceDate(builder *flatbuffers.Builder, eventClearanceDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(eventClearanceDate), 0)
}
func PoliceCallAddEventClearanceDescription(builder *flatbuffers.Builder, eventClearanceDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(eventClearanceDescription), 0)
}
func PoliceCallAddEventClearanceGroup(builder *flatbuffers.Builder, eventClearanceGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(eventClearanceGroup), 0)
}
func PoliceCallAddEventClearanceSubgroup(builder *flatbuffers.Builder, eventClearanceSubgroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(eventClearanceSubgroup), 0)
}
func PoliceCallAddGeneralOffenseNumber(builder *flatbuffers.Builder, generalOffenseNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(generalOffenseNumber), 0)
}
func PoliceCallAddHundredBlockLocation(builder *flatbuffers.Builder, hundredBlockLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(hundredBlockLocation), 0)
}
func PoliceCallAddInitialTypeDescription(builder *flatbuffers.Builder, initialTypeDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(initialTypeDescription), 0)
}
func PoliceCallAddInitialTypeGroup(builder *flatbuffers.Builder, initialTypeGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(initialTypeGroup), 0)
}
func PoliceCallAddInitialTypeSubgroup(builder *flatbuffers.Builder, initialTypeSubgroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(initialTypeSubgroup), 0)
}
func PoliceCallAddLatitude(builder *flatbuffers.Builder, latitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(latitude), 0)
}
func PoliceCallAddLongitude(builder *flatbuffers.Builder, longitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(longitude), 0)
}
func PoliceCallAddZoneBeat(builder *flatbuffers.Builder, zoneBeat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(zoneBeat), 0)
}
func PoliceCallEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
